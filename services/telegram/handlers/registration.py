from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.i18n import I18n
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.database import ORM
from services.telegram.misc.callbacks import HomeCallback, CitySelect, \
    AdminCallback, LangCallback, CountrySelect, LangChangeCallBack, RenewSubscription, ChooseModelCallback, \
    FullButtonCallback


class Keyboards:
    @staticmethod
    def send_phone(i18n: I18n, user):
        return ReplyKeyboardMarkup(resize_keyboard=True,
                                   one_time_keyboard=True,
                                   keyboard=[[
                                       KeyboardButton(
                                           text=i18n.gettext('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', locale=user.lang),
                                           request_contact=True)
                                   ]])

    @staticmethod
    def home(i18n: I18n, user) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=i18n.gettext("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", locale=user.lang)+" üìï",
                                     callback_data=HomeCallback(
                                         action="instruction").pack())],
            [
                InlineKeyboardButton(text=i18n.gettext('–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', locale=user.lang)+" üè≥Ô∏è",
                                     callback_data=LangChangeCallBack(
                                         action="change", lang="").pack())
            ],
            [
                InlineKeyboardButton(text=i18n.gettext('–ù–∞—à –∫–∞–Ω–∞–ª', locale=user.lang)+" üë•",
                                     url="https://t.me/Yourrepairassistant")
            ],
            [
                InlineKeyboardButton(text=i18n.gettext('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤', locale=user.lang)+" üìö",
                                     switch_inline_query_current_chat="disk ")
            ]
        ])
        if user.role == 'admin':
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=i18n.gettext("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", locale=user.lang)+" ‚è≥", switch_inline_query_current_chat="user ")])

        return keyboard

    @staticmethod
    def back_to_home(i18n: I18n, user) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text=i18n.gettext("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", locale=user.lang),
                       callback_data=HomeCallback(action="back_to_home"))
        return builder.as_markup()

    @staticmethod
    def links(links: list, i18n: I18n, user):
        builder = InlineKeyboardBuilder()
        for i, link in enumerate(links, start=1):
            builder.button(text=i18n.gettext("–ú–∞—Ç–µ—Ä–∏–∞–ª {} üìé", locale=user.lang).format(i), url=link)
        builder.adjust(1, repeat=True)
        return builder

    @staticmethod
    def countries(countries: dict):
        builder = InlineKeyboardBuilder()
        for i, country in enumerate(countries):
            builder.button(text=f"{country}",
                           callback_data=CountrySelect(name=country))
        builder.adjust(1, repeat=True)
        return builder.as_markup()

    @staticmethod
    def cities(countries: list):
        builder = InlineKeyboardBuilder()
        for i, country in enumerate(countries):
            builder.button(text=f"{country}",
                           callback_data=CitySelect(name=country))
        # builder.button(text=f"–í–ø–µ—Ä–µ–¥", callback_data=CitySelect(name=country))
        builder.adjust(1, repeat=True)
        return builder.as_markup()

    @staticmethod
    def empty():
        return InlineKeyboardMarkup(inline_keyboard=[])

    @staticmethod
    def guest(user_id, i18n: I18n, user):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", locale=user.lang),
            callback_data=AdminCallback(action="accept", user_id=user_id))
        builder.button(
            text=i18n.gettext("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", locale=user.lang),
            callback_data=AdminCallback(action="cancel", user_id=user_id))
        return builder.as_markup()

    @staticmethod
    def lang(is_menu=False):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏",
            callback_data=LangCallback(lang="en") if not is_menu else LangChangeCallBack(action='changed', lang="en"))
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
            callback_data=LangCallback(lang="ru") if not is_menu else LangChangeCallBack(action='changed', lang="ru"))
        return builder.as_markup()

    @staticmethod
    def months(user, i18n: I18n):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("1 –º–µ—Å—è—Ü", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=1)
        )
        builder.button(
            text=i18n.gettext("3 –º–µ—Å—è—Ü–∞", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=3)
        )
        builder.button(
            text=i18n.gettext("6 –º–µ—Å—è—Ü–µ–≤", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=6)
        )
        builder.button(
            text=i18n.gettext("1 –≥–æ–¥", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=12)
        )
        return builder.as_markup()

    @staticmethod
    def models(models):
        builder = InlineKeyboardBuilder()
        for model in models:
            builder.row(
                InlineKeyboardButton(
                    text=model,
                    callback_data=ChooseModelCallback(model=model).pack()
                )
            )
        return builder.as_markup()

    @staticmethod
    def add_full_btn(builder, error_code, model):
        if error_code.find(':') != -1:
            error_code = error_code.replace(':', 'doubledott')
        builder.row(
            InlineKeyboardButton(
                text='–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                callback_data=FullButtonCallback(action='show', error_code=error_code, model=model).pack()
            )
        )
        return builder
