from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from aiogram.types import Message, CallbackQuery
from services.analyzer.nand import NandList
from services.telegram.misc.keyboards import Keyboards
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.i18n import I18n
from database.database import ORM
from database.models import User 
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import LangCallback

router = Router()
router.message.filter(RoleFilter(roles=["admin", "user"]))
router.callback_query.filter(RoleFilter(roles=["admin", "user"]))


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
@router.message(Command("start"))
async def home(message: Message, user: User, i18n: I18n):
    reply_markup = Keyboards.home(i18n, user)

    greeting_message = i18n.gettext(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
        "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
        "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
        locale=user.lang
    ).format(user.username)

    await message.answer(
        greeting_message,
        reply_markup=reply_markup,
        reply_to_message_id=message.message_id
    )


@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è " + "üìï")
@router.message(F.text == "Instructions " + "üìï")
async def instruction(message: Message, user: User, i18n: I18n):
    await message.answer(
        i18n.gettext(
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Panic –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: \n\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n"
            "4. –û—Ç–∫—Ä–æ–π—Ç–µ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. \n\n"
            "–ù–∞–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º panic-full –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç. "
            "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ AirDrop. \n\n"
            "–í–∞–∂–Ω–æ: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö "
            "—Ñ–∞–π–ª–æ–≤ panic.\n",
            locale=user.lang),
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id
    )


@router.message(F.text == "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ " + "üè≥Ô∏è")
@router.message(F.text == "Change language " + "üè≥Ô∏è")
async def change_language(message: Message, user: User, i18n: I18n,state: FSMContext):
    await state.clear()
    await message.answer(i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", locale=user.lang),
                         reply_markup=Keyboards.lang())


@router.callback_query(LangCallback.filter())
async def change_language_callback(callback: CallbackQuery,
                                   callback_data: LangCallback,
                                   i18n: I18n,
                                   orm: ORM,
                                   state:FSMContext):
    user = await orm.user_repo.upsert_user(callback.from_user.id,
                                          lang=callback_data.lang)
    if callback.message:
        await callback.message.answer(
            i18n.gettext("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω", locale=user.lang),
            reply_markup=Keyboards.home(i18n, user))
    await state.clear()

@router.message(F.text == "–ù–∞–∑–∞–¥ " + "‚óÄÔ∏è")
@router.message(F.text == "Back " + "‚óÄÔ∏è")
async def back_to_home(message: Message, user: User, i18n: I18n):
    await message.answer(
        i18n.gettext(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
            "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
            "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
            locale=user.lang).format(user.username),
        reply_markup=Keyboards.home(i18n, user))


@router.message(F.document.file_name.endswith((".ips", ".txt", ".xlsx")))
async def handle_document_upload(message: Message, user: User, i18n: I18n, orm: ORM, bot: Bot):
    if user.role != 'user':
        await message.answer(i18n.gettext("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", locale=user.lang))
        return

    await message.answer(
        i18n.gettext("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", locale=user.lang),
        reply_markup=Keyboards.get_consultation(i18n, user)
    )

@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üìû")
async def handle_get_consultation(message: Message, user: User, i18n: I18n, orm: ORM, bot: Bot,state:FSMContext):
    await message.answer(i18n.gettext("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω!", locale=user.lang))
    await message.delete()
    await message.answer(
        i18n.gettext("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", locale=user.lang),
        reply_markup=Keyboards.back_to_home(i18n, user)
    )

    admins = await orm.user_repo.get_admins()
    
    if admins:
        for admin in admins:
            message_text = i18n.gettext(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
                f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —á–∞—Ç (ID: {user.phone_number}).", locale=admin.lang
            )
        if user.username:
            message_text += f"\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: [t.me/{user.username}](https://t.me/{user.username})"
        await bot.send_message(chat_id=admin.user_id, text=message_text, parse_mode="Markdown")
    await state.finish()

@router.message(F.text == ("Disc guide") + " üìö")
@router.message(F.text == ("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤") + " üìö")
@router.inline_query(F.query.startswith('disk '))
async def find_disk(inq: InlineQuery):
    query = inq.query[5:]
    results = []
    if query:
        nand = NandList()
        models = nand.get_models()
        if query != '':
            models = list(filter(lambda x: x['name'].lower().find(query) != -1, models))
        for model in (models if len(models) < 50 else models[:50]):
            results.append(
                InlineQueryResultArticle(
                    id=str(model['row']),
                    title=f'{model["name"]}',
                    input_message_content=InputTextMessageContent(
                        message_text="/disk\n"
                                     "–î–∏—Å–∫ {}\n"
                                     "–ù–æ–º–µ—Ä: {}\n".format(model['name'], model['row']),
                        parse_mode=ParseMode.HTML
                    )
                )
            )
    await inq.answer(results=results, cache_time=10)


@router.message(Command("disk"))
async def find_command(message: Message, user: User, orm: ORM, i18n: I18n):
    model_name = message.text.split("\n")[1].split()[-1]
    model_row = message.text.split("\n")[2].split()[-1]

    nand = NandList()
    answer = nand.find_info(dict(name=model_name, row=model_row), user.lang)
    if answer:
        await message.answer(answer)
    else:
        await message.answer(i18n.gettext("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", locale=user.lang).format(model_name))



@router.message(F.text == "alfinkly")
async def info(message: Message, user, i18n: I18n):
    await message.answer(i18n.gettext("–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å... –∂–∏–≤?", locale=user.lang))


@router.message(F.text == "dokuzu")
async def info(message: Message, user, i18n: I18n):
    await message.answer(i18n.gettext("–≠—Ç–æ –º–æ–π —Ö–æ–∑—è–∏–Ω!!!!", locale=user.lang))

@router.message(F.text == "onyoka")
async def info(message: Message, user, i18n: I18n):
    await message.answer(i18n.gettext("–ö –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º!!!!", locale=user.lang))

@router.callback_query(F.data == "nothing")
async def nothing(callback: CallbackQuery):
    await callback.answer()