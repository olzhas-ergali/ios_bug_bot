from aiogram import Router, F, Bot

from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode
from services.telegram.handlers.states import DeleteUserStates
from services.analyzer.nand import NandList
from services.telegram.misc.keyboards import Keyboards
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent,InlineKeyboardMarkup,InlineKeyboardButton
from aiogram.utils.i18n import I18n
from database.database import ORM
from database.models import User 
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import LangCallback,UserListPagination 


router = Router()
router.message.filter(RoleFilter(roles=["admin", "user"]))
router.callback_query.filter(RoleFilter(roles=["admin", "user"]))
CHANNEL_URL = "https://t.me/Yourrepairassistant"


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
@router.message(Command("start"))
async def home(message: Message, user: User, i18n: I18n):
    reply_markup = Keyboards.home(i18n, user)

    greeting_message = i18n.gettext(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
        "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
        "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
        locale=user.lang
    ).format(user.username)

    await message.answer(
        greeting_message,
        reply_markup=reply_markup,
        reply_to_message_id=message.message_id
    )


@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è " + "üìï")
@router.message(F.text == "Instructions " + "üìï")
async def instruction(message: Message, user: User, i18n: I18n):
    await message.answer(
        i18n.gettext(
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Panic –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: \n\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n"
            "4. –û—Ç–∫—Ä–æ–π—Ç–µ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. \n\n"
            "–ù–∞–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º panic-full –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç. "
            "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ AirDrop. \n\n"
            "–í–∞–∂–Ω–æ: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö "
            "—Ñ–∞–π–ª–æ–≤ panic.\n",
            locale=user.lang),
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id
    )
@router.message(F.text == "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ " + "üè≥Ô∏è")
@router.message(F.text == "Change language " + "üè≥Ô∏è")
async def change_language(message: Message, user: User, i18n: I18n,state: FSMContext):
    await state.clear()
    await message.answer(i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", locale=user.lang),
                         reply_markup=Keyboards.lang())

@router.callback_query(F.data == "users_list")
async def show_users_list(callback: CallbackQuery, orm: ORM, i18n: I18n, user: User):
    if user.role != 'admin':
        await callback.answer(i18n.gettext("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", locale=user.lang))
        return
    
    await show_users_page(callback, orm, i18n, user, page=0)

@router.callback_query(UserListPagination.filter())
async def navigate_users_list(callback: CallbackQuery, callback_data: UserListPagination, orm: ORM, i18n: I18n, user: User):
    if user.role != 'admin':
        await callback.answer(i18n.gettext("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", locale=user.lang))
        return
    
    await show_users_page(callback, orm, i18n, user, page=callback_data.page)

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: CallbackQuery, i18n: I18n, user: User):
    await callback.message.edit_text(
        i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", locale=user.lang),
        reply_markup=Keyboards.admin_panel(i18n, user)
    )

@router.callback_query(F.data == "delete_user_by_id")
async def ask_for_user_id(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    if user.role != 'admin':
        await callback.answer(i18n.gettext("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", locale=user.lang))
        return

    await state.set_state(DeleteUserStates.waiting_for_user_id)
    await callback.message.answer(i18n.gettext("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", locale=user.lang))
    await callback.answer()

@router.message(DeleteUserStates.waiting_for_user_id)
async def delete_user_by_id(message: Message, state: FSMContext, orm: ORM, i18n: I18n, user: User):
    try:
        user_id = int(message.text)  
        user_to_delete = await orm.user_repo.find_user_by_user_id(user_id) 

        if user_to_delete:
            await orm.user_repo.delete(user_to_delete)
            await message.answer(i18n.gettext("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!", locale=user.lang))
        else:
            await message.answer(i18n.gettext("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", locale=user.lang))

    except ValueError:
        await message.answer(i18n.gettext("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", locale=user.lang))
    except Exception as e:
        print(f"Error deleting user: {e}")
        await message.answer(i18n.gettext("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", locale=user.lang))
    finally:
        await state.clear()

async def show_users_page(callback: CallbackQuery, orm: ORM, i18n: I18n, user: User, page: int):
    users = await orm.user_repo.find_all()
    
    users_per_page = 5
    total_pages = (len(users) + users_per_page - 1) // users_per_page
    start_idx = page * users_per_page
    end_idx = start_idx + users_per_page
    page_users = users[start_idx:end_idx]
    
    message_parts = [i18n.gettext("üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", locale=user.lang) + "\n"]
    
    for idx, list_user in enumerate(page_users, start=start_idx + 1):
        user_info = (
            f"üîπ <b>{idx}. {hcode(list_user.username or '–ë–µ–∑ username')}</b>\n"
            f"üÜî <i>ID:</i> {hcode(list_user.user_id)}\n"
            f"üë§ <i>–†–æ–ª—å:</i> {hcode(list_user.role)}\n"
            f"üåç <i>–Ø–∑—ã–∫:</i> {hcode(list_user.lang)}\n"
            f"üì± <i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> {hcode(list_user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<i>{'‚îÄ' * 30}</i>"
        )
        message_parts.append(user_info)
    
    message_parts.append(f"\n{i18n.gettext('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', locale=user.lang)}: {len(users)}")
    
    full_message = "".join(message_parts)
    keyboard = Keyboards.get_users_list_keyboard(total_pages, page, i18n, user)
    
    await callback.message.edit_text(
        full_message,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    
    await callback.answer()


@router.callback_query(LangCallback.filter())
async def change_language_callback(callback: CallbackQuery,
                                   callback_data: LangCallback,
                                   i18n: I18n,
                                   orm: ORM,
                                   state:FSMContext):
    user = await orm.user_repo.upsert_user(callback.from_user.id,
                                          lang=callback_data.lang)
    if callback.message:
        await callback.message.answer(
            i18n.gettext("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω", locale=user.lang),
            reply_markup=Keyboards.home(i18n, user))
    await state.clear()

@router.message(F.text == "–ù–∞–∑–∞–¥ " + "‚óÄÔ∏è")
@router.message(F.text == "Back " + "‚óÄÔ∏è")
async def back_to_home(message: Message, user: User, i18n: I18n):
    await message.answer(
        i18n.gettext(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
            "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
            "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
            locale=user.lang).format(user.username),
        reply_markup=Keyboards.home(i18n, user))

@router.message(F.text == "–ù–∞—à –∫–∞–Ω–∞–ª " + "üë•")
@router.message(F.text == "Our channel " + "üë•")
async def open_channel(message: Message):
    await message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {CHANNEL_URL}")

@router.callback_query(F.data == "get_consultation")
async def callback_get_consultation(callback_query: CallbackQuery, user: User, bot: Bot, i18n: I18n, orm: ORM):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        i18n.gettext("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω!", locale=user.lang)
    )
    
    admins = await orm.user_repo.get_admins()
    if admins:
        for admin in admins:
            message_text = i18n.gettext(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
                f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —á–∞—Ç (ID: {user.phone_number}).", locale=admin.lang
            )
            if user.username:
                message_text += f"\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: [t.me/{user.username}](https://t.me/{user.username})"
            
            await bot.send_message(chat_id=admin.user_id, text=message_text, parse_mode="Markdown")


@router.message(F.text == ("Disc directory") + " üìö")
@router.message(F.text == ("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤") + " üìö")
async def send_disk_guide(message: Message):
    keyboard = get_inline_button()
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –¥–∏—Å–∫–æ–≤:",
        reply_markup=keyboard,
    )
    

def get_inline_button():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ò—Å–∫–∞—Ç—å –¥–∏—Å–∫ üîç",
                    switch_inline_query_current_chat="disk ",
                )
            ]
        ]
    )
    return keyboard

@router.inline_query(F.query.startswith('disk '))
async def find_disk(inq: InlineQuery):
    query = inq.query[5:]
    results = []
    if query:
        nand = NandList()
        models = nand.get_models()
        if query != '':
            models = list(filter(lambda x: x['name'].lower().find(query) != -1, models))
        for model in (models if len(models) < 50 else models[:50]):
            results.append(
                InlineQueryResultArticle(
                    id=str(model['row']),
                    title=f'{model["name"]}',
                    input_message_content=InputTextMessageContent(
                        message_text="/disk\n"
                                     "–î–∏—Å–∫ {}\n"
                                     "–ù–æ–º–µ—Ä: {}\n".format(model['name'], model['row']),
                        parse_mode=ParseMode.HTML
                    )
                )
            )
    await inq.answer(results=results, cache_time=10)


@router.message(Command("disk"))
async def find_command(message: Message, user: User, orm: ORM, i18n: I18n):
    model_name = message.text.split("\n")[1].split()[-1]
    model_row = message.text.split("\n")[2].split()[-1]

    nand = NandList()
    answer = nand.find_info(dict(name=model_name, row=model_row), user.lang)
    if answer:
        await message.answer(answer)
    else:
        await message.answer(i18n.gettext("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", locale=user.lang).format(model_name))

@router.message(F.text == "Admin panel ‚öôÔ∏è")
@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è")
async def open_admin_panel(message: Message, user: User, i18n: I18n):
    if user.role == 'admin':
        admin_keyboard = Keyboards.admin_panel(i18n, user)
        await message.answer(i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", locale=user.lang), reply_markup=admin_keyboard)
    else:
        await message.answer(i18n.gettext("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", locale=user.lang))


@router.callback_query(F.data == "nothing")
async def nothing(callback: CallbackQuery):
    await callback.answer()
