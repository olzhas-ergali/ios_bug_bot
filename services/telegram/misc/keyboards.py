from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.i18n import I18n
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.database import ORM
from services.telegram.misc.callbacks import  \
    AdminCallback, RenewSubscription, ChooseModelCallback, \
    FullButtonCallback,LangCallback,LangChangeCallBack, BroadcastLangCallback, BroadcastCallback, UserListPagination

class Keyboards:

    @staticmethod
    def send_phone(i18n: I18n, user):
        return ReplyKeyboardMarkup(resize_keyboard=True,
                                   one_time_keyboard=True,
                                   keyboard=[[
                                       KeyboardButton(
                                           text=i18n.gettext('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', locale=user.lang),
                                           request_contact=True)
                                   ]])

    @staticmethod
    def home(i18n: I18n, user) -> ReplyKeyboardMarkup:
        user_keyboard = [
            [KeyboardButton(text=i18n.gettext("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", locale=user.lang) + " üìï")],
            [KeyboardButton(text=i18n.gettext("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", locale=user.lang) + " üè≥Ô∏è")],
            [KeyboardButton(text=i18n.gettext("–ù–∞—à –∫–∞–Ω–∞–ª", locale=user.lang) + " üë•", url="https://t.me/Yourrepairassistant")],
            [KeyboardButton(text=i18n.gettext("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤", locale=user.lang) + " üìö")],
        ]

        if user.role == 'admin':
            user_keyboard.append([KeyboardButton(text=i18n.gettext("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", locale=user.lang) + " ‚öôÔ∏è")])

        reply_markup = ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True,
            keyboard=user_keyboard
        )

        return reply_markup
    
    @staticmethod
    def admin_panel(i18n: I18n, user) -> InlineKeyboardMarkup:
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", locale=user.lang) + " ‚è≥",
                    switch_inline_query_current_chat="user "
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—ã–ª–∫–∞", locale=user.lang) + " üì£",
                    callback_data="broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", locale=user.lang) + " üë•",
                    callback_data="users_list"
                )
            ]
        ])
        return admin_keyboard

    @staticmethod
    def get_users_list_keyboard(total_pages: int, current_page: int, i18n: I18n, user) -> InlineKeyboardMarkup:
        buttons = []

        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=UserListPagination(page=current_page - 1).pack()
                )
            )

        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page + 1}/{total_pages}",
                callback_data="nothing"
            )
        )

        if current_page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=UserListPagination(page=current_page + 1).pack()
                )
            )

        buttons.append(nav_buttons)

        buttons.append([
            InlineKeyboardButton(
                text=i18n.gettext("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", locale=user.lang),
                callback_data="delete_user_by_id"
            ),
            InlineKeyboardButton(
                text=i18n.gettext("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", locale=user.lang) + " ‚Ü©Ô∏è",
                callback_data="back_to_admin"
            )
        ])

        return InlineKeyboardMarkup(inline_keyboard=buttons)
    

    @staticmethod
    def back_to_home(i18n: I18n, user) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(resize_keyboard=True,
                                   one_time_keyboard=True,
                                   keyboard=[[
                                       KeyboardButton(
                                           text=i18n.gettext("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", locale=user.lang))
                                   ]])

    @staticmethod
    def get_consultation(i18n: I18n, user) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=i18n.gettext("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", locale=user.lang) + " üìß",
                        callback_data="get_consultation"
                    )
                ]
            ]
        )

    
    @staticmethod
    def lang(is_menu=False):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏",
            callback_data=LangCallback(lang="en") if not is_menu else LangChangeCallBack(action='changed', lang="en"))
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
            callback_data=LangCallback(lang="ru") if not is_menu else LangChangeCallBack(action='changed', lang="ru"))
        return builder.as_markup()

    
    @staticmethod
    def lang2(is_menu=False):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏",
            callback_data=BroadcastLangCallback(lang="en").pack() if not is_menu else BroadcastLangCallback(action='changed', lang="en"))
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
            callback_data=BroadcastLangCallback(lang="ru").pack() if not is_menu else BroadcastLangCallback(action='changed', lang="ru"))
        return builder.as_markup()


    @staticmethod
    def links(links: list, i18n: I18n, user):
        builder = InlineKeyboardBuilder()
        for i, link in enumerate(links, start=1):
            builder.button(text=i18n.gettext("–ú–∞—Ç–µ—Ä–∏–∞–ª {} üìé", locale=user.lang).format(i), url=link)
        builder.adjust(1, repeat=True)
        return builder

    @staticmethod
    def empty():
        return InlineKeyboardMarkup(inline_keyboard=[])

    @staticmethod
    def guest(user_id, i18n: I18n, user):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", locale=user.lang),
            callback_data=AdminCallback(action="accept", user_id=user_id))
        builder.button(
            text=i18n.gettext("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", locale=user.lang),
            callback_data=AdminCallback(action="cancel", user_id=user_id))
        return builder.as_markup()

    @staticmethod
    def broadcast(user_id, i18n: I18n, user):
        builder = InlineKeyboardBuilder()

        builder.button(
            text=i18n.gettext("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", locale=user.lang),
            callback_data=BroadcastCallback(action="accept", user_id=user_id))
        builder.button(
            text=i18n.gettext("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", locale=user.lang),
            callback_data=BroadcastCallback(action="cancel", user_id=user_id))
        return builder.as_markup()
    
    @staticmethod
    def months(user, i18n: I18n):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("1 –º–µ—Å—è—Ü", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=1).pack()
        )
        builder.button(
            text=i18n.gettext("3 –º–µ—Å—è—Ü–∞", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=3).pack()
        )
        builder.button(
            text=i18n.gettext("6 –º–µ—Å—è—Ü–µ–≤", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=6).pack()
        )
        builder.button(
            text=i18n.gettext("1 –≥–æ–¥", locale=user.lang),
            callback_data=RenewSubscription(user_id=user.user_id, months=12).pack()
        )
        return builder.as_markup()

    @staticmethod
    def models(models):
        builder = InlineKeyboardBuilder()
        for model in models:
            builder.row(
                InlineKeyboardButton(
                    text=model,
                    callback_data=ChooseModelCallback(model=model).pack()
                )
            )
        return builder.as_markup()

    @staticmethod
    def add_full_btn(builder, error_code, model):
        if error_code.find(':') != -1:
            error_code = error_code.replace(':', 'doubledott')
        builder.row(
            InlineKeyboardButton(
                text='–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                callback_data=FullButtonCallback(action='show', error_code=error_code, model=model).pack()
            )
        )
        return builder
